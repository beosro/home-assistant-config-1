#################################################################
## Automations
#################################################################

        ##########################################################
        ## Master Switch Control.
        ##########################################################

- alias: Master Switch toggled.

  trigger:
    platform: state
    entity_id: sensor.master_switch

  action:
    - service_template: >
        {% if is_state('group.livingroom_lights', 'off') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: group.livingroom_lights
      data_template:
        brightness: "{{ states.input_slider.dayshift_current_brightness.state }}"

    - service_template: >
        {% if is_state('light.livingroom_main', 'on') or is_state('light.livingroom_lamp', 'on') %}
          homeassistant.turn_off
        {% endif %}
      entity_id: group.livingroom_lights


        ##########################################################
        ## Bedroom Switch Control.
        ##########################################################

- alias: Bedroom Switch toggled.
 
  trigger:
    platform: state 
    entity_id: sensor.bedroom_switch
 
  action:
    - service_template: >
        {% if is_state('light.bedroom_lamp', 'off') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.bedroom_lamp
      data_template:
        brightness: "{{ states.input_slider.dayshift_current_brightness.state }}"
  

    - service_template: >
        {% if is_state('light.bedroom_lamp', 'on') %}
          homeassistant.turn_off
        {% endif %}
      entity_id: light.bedroom_lamp

        ##########################################################
        ## Kitchen Light Control
        ##########################################################

- alias: Kitchen motion triggered on/off.

  trigger:
    platform: state
    entity_id: sensor.fibaro_system_fgms001_motion_sensor_burglar_2

  condition:
    condition: state
    entity_id: input_boolean.disable_kitchen_motion_lights
    state: 'off'
    
  action:
    - service_template: >
        {% if states('sensor.fibaro_system_fgms001_motion_sensor_burglar_2') | int == 8 or states('sensor.fibaro_system_fgms001_motion_sensor_burglar_2') | int == 3 %}
          homeassistant.turn_on
        {% endif %}
      entity_id: group.kitchen_lights
      data_template:
        brightness: "{{ states.input_slider.dayshift_current_brightness.state }}"

    - service_template: >
        {% if states('sensor.fibaro_system_fgms001_motion_sensor_burglar_2') | int == 0 %}
          homeassistant.turn_off
        {% endif %}
      entity_id: group.kitchen_lights


- alias: Disable Kitchen Motion from Fibaro Tamper Alarm.

  trigger:
    platform: state
    entity_id: sensor.fibaro_system_fgms001_motion_sensor_burglar_2

  condition:
    condition: state
    entity_id: input_boolean.disable_tamper_alarm
    state: 'off'

  action:
    service_template: >
      {% if states('sensor.fibaro_system_fgms001_motion_sensor_burglar_2') | float == 3 and is_state('input_boolean.disable_kitchen_motion_lights', 'off') %}
        homeassistant.turn_on
      {% elif states('sensor.fibaro_system_fgms001_motion_sensor_burglar_2') | float == 3 and is_state('input_boolean.disable_kitchen_motion_lights', 'on') %}
        homeassistant.turn_off
      {% endif %}
    entity_id: input_boolean.disable_kitchen_motion_lights

        ##########################################################
        ## Home/Away Light Control
        ##########################################################

- alias: Turn off lights when away.

  trigger:
    platform: state
    entity_id: device_tracker.gundam212iphone_destinyiphone
    to: 'not_home'

  condition:
    condition: state
    entity_id: input_boolean.disable_autoaway_lights
    state: 'off'

  action:
    - service_template: >
        {% if is_state('light.livingroom_lamp', 'on') %}
          homeassistant.turn_on
        {% else %}
          homeassistant.turn_off
        {% endif %}
      entity_id: input_boolean.livingroom_lamp_ha

    - service_template: >
        {% if is_state('light.livingroom_main', 'on') %}
          homeassistant.turn_on
        {% else %}
          homeassistant.turn_off
        {% endif %}
      entity_id: input_boolean.livingroom_main_ha

    - service_template: >
        {% if is_state('light.bedroom_lamp', 'on') %}
          homeassistant.turn_on
        {% else %}
          homeassistant.turn_off
        {% endif %}
      entity_id: input_boolean.bedroom_lamp_ha

    - service: scene.turn_on
      entity_id: scene.all_lights_off

- alias: Notify of away/home state changes.

  trigger:
    platform: state
    entity_id: device_tracker.gundam212iphone_destinyiphone

  condition:
    condition: state
    entity_id: input_boolean.disable_autoaway_lights
    state: 'off'

  action:
    service: notify.telegram
    data:
      title: ''
      message: '{{ states.device_tracker.gundam212iphone_destinyiphone.attributes.friendly_name }} is now {{ states.device_tracker.gundam212iphone_destinyiphone.state }}, autoaway disable turned {{ states.input_boolean.disable_autoaway_lights.state }}.'

- alias: Return lights depending on timeframe since last on.

  trigger:
    platform: state
    entity_id: device_tracker.gundam212iphone_destinyiphone
    to: 'home'

  condition:
    condition: state
    entity_id: input_boolean.disable_autoaway_lights
    state: 'off'

  action:
    - service_template: >
        {% if is_state('input_boolean.livingroom_lamp_ha', 'on') and (now.timestamp() - states.input_boolean.livingroom_lamp_ha.last_changed.timestamp()) < (states.input_slider.autoaway_timeout.state | int * 3600) %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.livingroom_lamp
      data_template:
        brightness: "{{ states.input_slider.dayshift_current_brightness.state }}"

    - service_template: >
        {% if is_state('input_boolean.livingroom_main_ha', 'on') and (now.timestamp() - states.input_boolean.livingroom_main_ha.last_changed.timestamp()) < (states.input_slider.autoaway_timeout.state | int * 3600) %}
          homeassistant.turn_on
        {% elif (now.timestamp() - states.input_boolean.livingroom_main_ha.last_changed.timestamp()) > (states.input_slider.autoaway_timeout.state | int * 3600) %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.livingroom_main
      data_template:
        brightness: "{{ states.input_slider.dayshift_current_brightness.state }}"

    - service_template: >
        {% if is_state('input_boolean.bedroom_lamp_ha', 'on') and (now.timestamp() - states.input_boolean.bedroom_lamp_ha.last_changed.timestamp()) < (states.input_slider.autoaway_timeout.state | int * 3600) %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.bedroom_lamp

    - service: homeassistant.turn_off
      entity_id: group.lights_ha

        ##########################################################
        ## Projector Control
        ##########################################################

- alias: Take snapshot of light states and turn off lamp if livingroom main is on.

  trigger:
    platform: state
    entity_id: sensor.projector_state
    to: '1'

  condition:
    condition: state
    entity_id: input_boolean.disable_projector_lights
    state: 'off'

  action:
    - service_template: >
        {% if is_state('light.livingroom_lamp', 'on') %}
          homeassistant.turn_on
        {% else %}
          homeassistant.turn_off
        {% endif %}
      entity_id: input_boolean.livingroom_lamp_pa

    - service_template: >
        {% if is_state('light.livingroom_main', 'on') %}
          homeassistant.turn_on
        {% else %}
          homeassistant.turn_off
        {% endif %}
      entity_id: input_boolean.livingroom_main_pa

    - service_template: >
        {% if is_state('light.livingroom_main', 'on') %}
          homeassistant.turn_off
        {% else %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.livingroom_lamp
      data_template:
        transition: 30

- alias: Turn all lights that were on when projector turns off.
  
  trigger:
    platform: state
    entity_id: sensor.projector_state
    to: '0'

  condition:
    condition: state
    entity_id: input_boolean.disable_projector_lights
    state: 'off'

  action:
    - service_template: >
        {% if is_state('input_boolean.livingroom_lamp_pa', 'on') or is_state('light.livingroom_lamp', 'on') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.livingroom_lamp
      data_template:
        transition: 10
        brightness: "{{ states.input_slider.dayshift_current_brightness.state }}"

    - service_template: >
        {% if is_state('input_boolean.livingroom_main_pa', 'on') or is_state('light.livingroom_main', 'on') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.livingroom_main
      data_template:
        transition: 10
        brightness: "{{ states.input_slider.dayshift_current_brightness.state }}"

- alias: Turn off lights via roku playing.

  trigger:
    platform: state
    entity_id: media_player.roku_1gs3d4008651
    from: 'home'
    to: 'playing'

  condition:
    condition: state
    entity_id: input_boolean.disable_roku_lights
    state: 'off'

  action:
    service: homeassistant.turn_off
    entity_id: light.livingroom_main
    data:
      transition: 15


- alias: Turn on lights via roku home.

  trigger:
    platform: state
    entity_id: media_player.roku_1gs3d4008651
    from: 'playing'
    to: 'home'

  condition:
    condition: state
    entity_id: input_boolean.disable_roku_lights
    state: 'off'

  action:
    service_template: >
      {% if is_state('input_boolean.livingroom_main_pa', 'on') or is_state('light.livingroom_main', 'on') %}
        homeassistant.turn_on
      {% endif %}
    entity_id: light.livingroom_main
    data_template:
      transition: 10
      brightness: "{{ states.input_slider.dayshift_current_brightness.state }}"

        ##########################################################
        ## Day Shifting Control.
        ##########################################################

- alias: Set the brightness in the morning.

  trigger:
    platform: time
    after: '04:15:00'

  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.disable_day_shifting
        state: 'off'
      - condition: state
        entity_id: input_boolean.disable_morning_lights
        state: 'off'

  action:
    - service_template: >
        {% if is_state('light.livingroom_lamp', 'on') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.livingroom_lamp
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_morning.state }}"
        transition: "{{ states.input_slider.dayshift_brightness_morning_transition.state }}"

    - service_template: >
        {% if is_state('light.livingroom_lamp', 'off') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.livingroom_lamp
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_morning.state }}"
    
    - service_template: >
        {% if is_state('light.livingroom_lamp', 'off') %}
          homeassistant.turn_off
        {% endif %}
      entity_id: light.livingroom_lamp

    - service_template: >
        {% if is_state('light.livingroom_main', 'on') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.livingroom_main
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_morning.state }}"
        transition: "{{ states.input_slider.dayshift_brightness_morning_transition.state }}"

    - service_template: >
        {% if is_state('light.livingroom_main', 'off') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.livingroom_main
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_morning.state }}"
    
    - service_template: >
        {% if is_state('light.livingroom_main', 'off') %}
          homeassistant.turn_off
        {% endif %}
      entity_id: light.livingroom_main

    - service_template: >
        {% if is_state('light.kitchen_light', 'on') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.kitchen_light
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_morning.state }}"
        transition: "{{ states.input_slider.dayshift_brightness_morning_transition.state }}"

    - service_template: >
        {% if is_state('light.kitchen_light', 'off') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.kitchen_light
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_morning.state }}"
    
    - service_template: >
        {% if is_state('light.kitchen_light', 'off') %}
          homeassistant.turn_off
        {% endif %}
      entity_id: light.kitchen_light

    - service_template: >
        {% if is_state('light.bedroom_lamp', 'on') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.bedroom_lamp
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_morning.state }}"
        transition: "{{ states.input_slider.dayshift_brightness_morning_transition.state }}"

    - service_template: >
        {% if is_state('light.bedroom_lamp', 'off') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.bedroom_lamp
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_morning.state }}"
    
    - service_template: >
        {% if is_state('light.bedroom_lamp', 'off') %}
          homeassistant.turn_off
        {% endif %}
      entity_id: light.bedroom_lamp

    - service: input_slider.select_value
      entity_id: input_slider.dayshift_current_brightness
      data_template:
        value: "{{ states.input_slider.dayshift_brightness_morning.state }}"

    - service: notify.telegram
      data:
        title: ''
        message: 'Setting the brightness for morning wakeup routine.'

- alias: Set the brightness in the sunrise.

  trigger:
    platform: sun
    event: sunrise
    offset: "01:00:00"

  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.disable_day_shifting
        state: 'off'
      - condition: state
        entity_id: input_boolean.disable_sunrise_lights
        state: 'off'

  action:
    - service_template: >
        {% if is_state('light.livingroom_lamp', 'on') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.livingroom_lamp
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_sunrise.state }}"
        transition: "{{ states.input_slider.dayshift_brightness_sunrise_transition.state }}"

    - service_template: >
        {% if is_state('light.livingroom_lamp', 'off') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.livingroom_lamp
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_sunrise.state }}"
    
    - service_template: >
        {% if is_state('light.livingroom_lamp', 'off') %}
          homeassistant.turn_off
        {% endif %}
      entity_id: light.livingroom_lamp

    - service_template: >
        {% if is_state('light.livingroom_main', 'on') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.livingroom_main
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_sunrise.state }}"
        transition: "{{ states.input_slider.dayshift_brightness_sunrise_transition.state }}"

    - service_template: >
        {% if is_state('light.livingroom_main', 'off') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.livingroom_main
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_sunrise.state }}"
    
    - service_template: >
        {% if is_state('light.livingroom_main', 'off') %}
          homeassistant.turn_off
        {% endif %}
      entity_id: light.livingroom_main

    - service_template: >
        {% if is_state('light.kitchen_light', 'on') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.kitchen_light
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_sunrise.state }}"
        transition: "{{ states.input_slider.dayshift_brightness_sunrise_transition.state }}"

    - service_template: >
        {% if is_state('light.kitchen_light', 'off') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.kitchen_light
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_sunrise.state }}"
    
    - service_template: >
        {% if is_state('light.kitchen_light', 'off') %}
          homeassistant.turn_off
        {% endif %}
      entity_id: light.kitchen_light

    - service_template: >
        {% if is_state('light.bedroom_lamp', 'on') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.bedroom_lamp
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_sunrise.state }}"
        transition: "{{ states.input_slider.dayshift_brightness_sunrise_transition.state }}"

    - service_template: >
        {% if is_state('light.bedroom_lamp', 'off') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.bedroom_lamp
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_sunrise.state }}"
    
    - service_template: >
        {% if is_state('light.bedroom_lamp', 'off') %}
          homeassistant.turn_off
        {% endif %}
      entity_id: light.bedroom_lamp

    - service: input_slider.select_value
      entity_id: input_slider.dayshift_current_brightness
      data_template:
        value: "{{ states.input_slider.dayshift_brightness_sunrise.state }}"

    - service: notify.telegram
      data:
        title: ''
        message: 'Setting the brightness for sunrise.'

- alias: Set the brightness in the sunset.

  trigger:
    platform: sun
    event: sunset
    offset: "-01:00:00"

  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.disable_day_shifting
        state: 'off'
      - condition: state
        entity_id: input_boolean.disable_sunset_lights
        state: 'off'

  action:
    - service_template: >
        {% if is_state('light.livingroom_lamp', 'on') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.livingroom_lamp
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_sunset.state }}"
        transition: "{{ states.input_slider.dayshift_brightness_sunset_transition.state }}"

    - service_template: >
        {% if is_state('light.livingroom_lamp', 'off') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.livingroom_lamp
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_sunset.state }}"
    
    - service_template: >
        {% if is_state('light.livingroom_lamp', 'off') %}
          homeassistant.turn_off
        {% endif %}
      entity_id: light.livingroom_lamp

    - service_template: >
        {% if is_state('light.livingroom_main', 'on') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.livingroom_main
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_sunset.state }}"
        transition: "{{ states.input_slider.dayshift_brightness_sunset_transition.state }}"

    - service_template: >
        {% if is_state('light.livingroom_main', 'off') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.livingroom_main
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_sunset.state }}"
    
    - service_template: >
        {% if is_state('light.livingroom_main', 'off') %}
          homeassistant.turn_off
        {% endif %}
      entity_id: light.livingroom_main

    - service_template: >
        {% if is_state('light.kitchen_light', 'on') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.kitchen_light
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_sunset.state }}"
        transition: "{{ states.input_slider.dayshift_brightness_sunset_transition.state }}"

    - service_template: >
        {% if is_state('light.kitchen_light', 'off') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.kitchen_light
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_sunset.state }}"
    
    - service_template: >
        {% if is_state('light.kitchen_light', 'off') %}
          homeassistant.turn_off
        {% endif %}
      entity_id: light.kitchen_light

    - service_template: >
        {% if is_state('light.bedroom_lamp', 'on') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.bedroom_lamp
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_sunset.state }}"
        transition: "{{ states.input_slider.dayshift_brightness_sunset_transition.state }}"

    - service_template: >
        {% if is_state('light.bedroom_lamp', 'off') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.bedroom_lamp
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_sunset.state }}"
    
    - service_template: >
        {% if is_state('light.bedroom_lamp', 'off') %}
          homeassistant.turn_off
        {% endif %}
      entity_id: light.bedroom_lamp

    - service: input_slider.select_value
      entity_id: input_slider.dayshift_current_brightness
      data_template:
        value: "{{ states.input_slider.dayshift_brightness_sunset.state }}"

    - service: notify.telegram
      data:
        title: ''
        message: 'Setting the brightness for sunset.'


- alias: Set the brightness in the bedtime.

  trigger:
    platform: time
    after: "21:00:00"

  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: input_boolean.disable_day_shifting
        state: 'off'
      - condition: state
        entity_id: input_boolean.disable_bedtime_lights
        state: 'off'

  action:
    - service_template: >
        {% if is_state('light.livingroom_lamp', 'on') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.livingroom_lamp
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_bedtime.state }}"
        transition: "{{ states.input_slider.dayshift_brightness_bedtime_transition.state }}"

    - service_template: >
        {% if is_state('light.livingroom_lamp', 'off') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.livingroom_lamp
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_bedtime.state }}"
    
    - service_template: >
        {% if is_state('light.livingroom_lamp', 'off') %}
          homeassistant.turn_off
        {% endif %}
      entity_id: light.livingroom_lamp

    - service_template: >
        {% if is_state('light.livingroom_main', 'on') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.livingroom_main
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_bedtime.state }}"
        transition: "{{ states.input_slider.dayshift_brightness_bedtime_transition.state }}"

    - service_template: >
        {% if is_state('light.livingroom_main', 'off') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.livingroom_main
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_bedtime.state }}"
    
    - service_template: >
        {% if is_state('light.livingroom_main', 'off') %}
          homeassistant.turn_off
        {% endif %}
      entity_id: light.livingroom_main

    - service_template: >
        {% if is_state('light.kitchen_light', 'on') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.kitchen_light
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_bedtime.state }}"
        transition: "{{ states.input_slider.dayshift_brightness_bedtime_transition.state }}"

    - service_template: >
        {% if is_state('light.kitchen_light', 'off') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.kitchen_light
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_bedtime.state }}"
    
    - service_template: >
        {% if is_state('light.kitchen_light', 'off') %}
          homeassistant.turn_off
        {% endif %}
      entity_id: light.kitchen_light

    - service_template: >
        {% if is_state('light.bedroom_lamp', 'on') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.bedroom_lamp
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_bedtime.state }}"
        transition: "{{ states.input_slider.dayshift_brightness_bedtime_transition.state }}"

    - service_template: >
        {% if is_state('light.bedroom_lamp', 'off') %}
          homeassistant.turn_on
        {% endif %}
      entity_id: light.bedroom_lamp
      data_template:
        brightness: "{{ states.input_slider.dayshift_brightness_bedtime.state }}"
    
    - service_template: >
        {% if is_state('light.bedroom_lamp', 'off') %}
          homeassistant.turn_off
        {% endif %}
      entity_id: light.bedroom_lamp

    - service: input_slider.select_value
      entity_id: input_slider.dayshift_current_brightness
      data_template:
        value: "{{ states.input_slider.dayshift_brightness_bedtime.state }}"

    - service: notify.telegram
      data:
        title: ''
        message: 'Setting the brightness for bedtime.'


- alias: Set brightness to 100% when dayshift disabled.

  trigger:
    platform: state
    entity_id: input_boolean.disable_day_shifting
    from: 'off'
    to: 'on'

  action:
    service: input_slider.select_value
    entity_id: input_slider.dayshift_current_brightness
    data_template:
      value: 255